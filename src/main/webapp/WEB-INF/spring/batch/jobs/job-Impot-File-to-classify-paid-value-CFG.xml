<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch
	http://www.springframework.org/schema/batch/spring-batch.xsd
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd">

	<import resource="../../../ApplicationContex.xml" />
	<bean id="report" class="com.ncrm.dao.entities.BeanFile" scope="prototype" />


<!-- ###################################################################################################################### -->
								<!-- Traitement ChÃ¨ques -->
<!-- ###################################################################################################################### -->
	<batch:job id="importFileCFGCHQ">
		<batch:step id="stepChq">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderCHQ" writer="mysqlItemWriterCHQ" 
				processor="itemProcessor" commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	 	 <!-- <batch:listeners> <batch:listener ref="jobListener" /> </batch:listeners>  -->
	</batch:job>
	
		<bean id="cvsFileItemReaderCHQ" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="UTF8" />

		<!-- Read a csv file -->
		<property name="resource" value="file:#{jobParameters[resource]}" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names"
							value="dteTrt,nser,zib,cpt,rib,mnt" />
						<property name="delimiter" value=";"/>
					</bean>
				</property>
				<property name="fieldSetMapper">
					<!-- return back to reader, rather than a mapped object. -->
					<!-- <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" 
						/> -->
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="report" />
					</bean>
				</property>

			</bean>
		</property>

	</bean>

	<bean id="mysqlItemWriterCHQ"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="basicDataSourceCfg_chq" />
		<property name="sql">
			<value>
            <![CDATA[        
            INSERT INTO r_ncrm_extraction.cfg_paid_chq
				(nser,
				dteTrt,
				zib,
				zbk,
				loc,
				cpt,
				rib,
				mnt)
				VALUES
				(:nser,
				:dteTrt,
				:zib,
				:zbk,
				:loc,
				:cpt,
				:rib,
				:mnt);
			]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>
	
	
	
	
	<!-- ###################################################################################################################### -->
								<!-- Traitement LCN -->
<!-- ###################################################################################################################### -->
	

<batch:job id="importFileCFGLCN">
		<batch:step id="stepLcn">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReaderLCN" writer="mysqlItemWriterLCN" 
				processor="itemProcessor" commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
	 	<!--  <batch:listeners> <batch:listener ref="jobListener" /> </batch:listeners>  -->
	</batch:job>


<bean id="cvsFileItemReaderLCN" class="org.springframework.batch.item.file.FlatFileItemReader"
		scope="step">
		<property name="encoding" value="UTF8" />

		<!-- Read a csv file -->
		<property name="resource" value="file:#{jobParameters[resource]}" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names"
							value="dteTrt,nser,zib,cpt,rib,mnt" />
						<property name="delimiter" value=";"/>
					</bean>
				</property>
				<property name="fieldSetMapper">
					<!-- return back to reader, rather than a mapped object. -->
					<!-- <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" 
						/> -->
					<!-- map to an object -->
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="report" />
					</bean>
				</property>

			</bean>
		</property>

	</bean>

	<bean id="mysqlItemWriterLCN"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="basicDataSourceCfg_lcn" />
		<property name="sql">
			<value>
            <![CDATA[        
            INSERT INTO r_ncrm_extraction.cfg_paid_lcn
				(nser,
				dteTrt,
				zib,
				zbk,
				loc,
				cpt,
				rib,
				mnt)
				VALUES
				(:nser,
				:dteTrt,
				:zib,
				:zbk,
				:loc,
				:cpt,
				:rib,
				:mnt);
			]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>
	
	





	<!-- Optional JobExecutionListener to perform business logic before and 
		after the job -->
	  <!-- <bean id="jobListener" class="com.ncrm.SprBatch.ListnerCHQCFG"/>   -->

	<!-- Optional ItemProcessor to perform business logic/filtering on the input records -->
	<bean id="itemProcessor" class="com.ncrm.SprBatch.DataFilterProcessorCFG" /> 
</beans>



















 